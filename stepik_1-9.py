# # -*- coding: utf-8 -*-
from math import *

# i = 3
# if i / 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
# if i // 2:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
# if i % 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
# if i // 2 == 0:
#     print(i, 'чётное')
# else:
#     print(i, 'нечётное')
# if i % 2 != 0:
#     print(i, 'нечётное')
# else:
#     print(i, 'чётное')
# if i // 2 != 0:
# a = int(input())
# b = int(input())
# o = input()
# if o == "+":
#     print(a + b)
# elif o == "-":
#     print(a-b)
# elif o == "*":
#     print(a * b)
# elif o == "/" and b != 0:
#     print(a / b)
# elif o == "/" and b == 0:
#     print('На ноль делить нельзя!')
# else:
#     print('Неверная операция')
# 5.14
# c1 = input()
# c2 = input()
# if (c1 == c2) and (c1 == "красный" or c1 == "синий" or c1 == "желтый"):
#     print(c1)
# elif (c1 == "красный" and c2 == "синий") or (c2 == "красный" and c1 == "синий"):
#     print("фиолетовый")
# elif (c1 == "красный" and c2 == "желтый") or (c2 == "красный" and c1 == "желтый"):
#     print("оранжевый")
# elif (c1 == "синий" and c2 == "желтый") or (c2 == "синий" and c1 == "желтый"):
#     print("зеленый")
# else:
#     print("ошибка цвета")
# 5.15
# a = int(input())
# if a == 0:
#     print('зеленый')
# elif (1 <= a <= 10) and (a % 2 != 0):
#     print('красный')
# elif (1 <= a <= 10) and (a % 2 == 0):
#     print('черный')
# elif (11 <= a <= 18) and (a % 2 == 0):
#     print('красный')
# elif (11 <= a <= 18) and (a % 2 != 0):
#     print('черный')
# elif (19 <= a <= 28) and (a % 2 != 0):
#     print('красный')
# elif (19 <= a <= 28) and (a % 2 == 0):
#     print('черный')
# elif (29 <= a <= 36) and (a % 2 == 0):
#     print('красный')
# elif (29 <= a <= 36) and (a % 2 != 0):
#     print('черный')
# else:
#     print('ошибка ввода')
# 5.16
# a1 = int(input())
# b1 = int(input())
# a2 = int(input())
# b2 = int(input())
# if a1 == b2:
#     print(a1)
# elif a2 == b1:
#     print(a2)
# elif a1 <= a2 <= b1 and a1 <= b2 <= b1:
#     print(a2, b2)
# elif a2 <= a1 <= b2 and a2 <= b1 <= b2:
#     print(a1, b1)
# elif a2 <= a1 <= b2 and a1 <= b2 <= b1:
#     print(a1, b2)
# elif a1 <= a2 <= b1 and a2 <= b1 <= b2:
#     print(a2, b1)
# else:
#     print("пустое множество")
# exam
# ex.1
# y = int(input())
# y1 = y % 10
# y2 = y % 100
# if y1 == 0 and y2 == 0:
#     print("YES")
# else:
#     print("NO")
# ex.2
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# sum = x1 + y1 + x2 + y2
# if sum % 2 == 0:
#     print("YES")
# else:
#     print("NO")
# ex.2
# y = int(input())
# g = input()
# if g == "f" and 10 <= y <= 15:
#     print("YES")
# else:
#     print("NO")
# ex.3
# d = int(input())
# if 1 <= d <= 10:
#     if d == 1:
#         print("I")
#     elif d == 2:
#         print("II")
#     elif d == 3:
#         print("III")
#     elif d == 4:
#         print("IV")
#     elif d == 5:
#         print("V")
#     elif d == 6:
#         print("VI")
#     elif d == 7:
#         print("VII")
#     elif d == 8:
#         print("VIII")
#     elif d == 9:
#         print("IX")
#     elif d == 10:
#         print("X")
# else:
#     print("ошибка")
# ex.4
# i = int(input())
# if i % 2 != 0:
#     print("YES")
# elif i % 2 == 0 and 2 <= i <= 5:
#     print("NO")
# elif i % 2 == 0 and 6 <= i <= 20:
#     print("YES")
# elif i % 2 == 0 and i > 20:
#     print("NO")
# ex.5
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if (x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2):
#     print("YES")
# else:
#     print("NO")
# ex.6
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if (x2 == x1 + 1 and y2 == y1 - 2) or (x2 == x1 + 2 and y2 == y1 - 1):
#     print("YES")
# elif (x2 == x1 + 2 and y2 == y1 + 1) or (x2 == x1 + 1 and y2 == y1 + 2):
#     print("YES")
# elif (x2 == x1 - 1 and y2 == y1 + 2) or (x2 == x1 - 2 and y2 == y1 +1):
#     print("YES")
# elif (x2 == x1 - 2 and y2 == y1 - 1) or (x2 == x1 - 1) and (x2 == x1 - 1 and y2 == y1 - 2):
#     print("YES")
# else:
#     print("NO")
# ex.7
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
# if x1 == x2 and y1 == y2:
#     print("NO")
# elif x1 != x2 and y1 !=y2:
#     print("NO")
# if (x1 != x2 and y1 == y2) or (x1 == x2 and y1 != y2) or ((x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2)):
#     print("YES")
# else:
#     print("NO")
# 6.10
# num = int(123)
# a = (num % 1000) // 100
# b = (num % 100) // 10
# c = num % 10
# min = min(a, b, c)
# max = max(a, b, c)
# mid = a + b + c - min - max
# if max - min == mid:
#     print("Число интересное")
# else:
#     print("Число неинтересное")
# 6.11
# a1 = float(input())
# a2 = float(input())
# a3 = float(input())
# a4 = float(input())
# a5 = float(input())
# summ = abs(a1) + abs(a2) + abs(a3) + abs(a4) + abs(a5)
# print(summ)
# 6.12
# p1 = int(input())
# p2 = int(input())
# q1 = int(input())
# q2 = int(input())
# dist = abs(p1 -q1) + abs(p2 - q2)
# print(dist)
# 6.2.2
# first_name = input()
# last_name = input()
# print('Hello ' + first_name + ' ' + last_name + '! You just delved into Python')
# 6.2.3
# team_name = input()
# team_length = len(team_name)
# print('Футбольная команда ' + team_name + ' имеет длину ' + str(team_length) + ' символов')
# 6.2.4
# c1 = input()
# c2 = input()
# c3 = input()
# len1 = len(c1)
# len2 = len(c2)
# len3 = len(c3)
# mn = min(len1, len2, len3)
# mx = max(len1, len2, len3)
# if mn == len1 and mx == len2:
#     print(c1)
#     print(c2)
# elif mn == len1 and mx == len3:
#     print(c1)
#     print(c3)
# elif mn == len2 and mx == len1:
#     print(c2)
#     print(c1)
# elif mn == len2 and mx == len3:
#     print(c2)
#     print(c3)
# elif mn == len3 and mx == len1:
#     print(c3)
#     print(c1)
# elif mn == len3 and mx == len2:
#     print(c3)
#     print(c2)
# 6.2.5
# s1 = len(input())
# s2 = len(input())
# s3 = len(input())
# if (2 * s2 - s3 - s1) * (2 * s3 - s2 - s1) * (2 * s1 - s2 - s3) == 0:
#     print("YES")
# else:
#     print("NO")
# (2b-c-a)(2c-b-a)(2a-b-c) = 0
# 6.2.6
# 6.2.7
# Напишите программу, которая считывает одну строку, после чего выводит «YES»,
# если в введённой строке есть подстрока «суббота» или «воскресенье»,
# и «NO» в противном случае.
# st = input()
# if "суббота" in st or "воскресенье" in st:
#     print("YES")
# else:
#     print("NO")
# 6.2.8
# st = input()
# if "@" in st and "." in st:
#     print("YES")
# else:
#     print("NO")
# 6.3.1
# x1 = float(input())
# y1 = float(input())
# x2 = float(input())
# y2 = float(input())
# p = sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2))  # pow = возвести в степень
# print(p)
# 6.3.2
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R.
# r = float(input())
# s = pi * r * r
# c = 2 * pi * r
# print(s)
# print(c)
# 6.3.3
# a = float(input())
# b = float(input())
# arifm = (a + b) / 2
# geom = sqrt(a * b)
# garmon = (2 * a * b) / (a + b)
# quadr = sqrt((a ** 2 + b ** 2) / 2)
# print(arifm)
# print(geom)
# print(garmon)
# print(quadr)
# 6.3.4
# x = radians(float(input()))
# y = sin(x) + cos(x) + pow(tan(x), 2)
# r = pi * x / 180
# print(y)
# 6.3.5
# x = float(input())
# y = ceil(x) + floor(x)
# print(y)
# 6.2.6
# a = float(input())
# b = float(input())
# c = float(input())
# D = b * b - 4 * a * c
# if D > 0:
#     x1 = ((-b - sqrt(D)) / (2 * a))
#     x2 = ((-b + sqrt(D)) / (2 * a))
#     print(min(x1, x2), max(x1, x2), sep = '\n')
# elif D == 0:
#     print((-b) / (2 * a))
# else:
#     print('Нет корней')
# 6.2.7
# n = int(input())
# a = float(input())
# s = (n * float(a * a)) / (4 * tan(pi / float(n)))
# print(s)
# 7.1.4
# n = int(input())
# for i in range(n):
#     i += i
#     print('*' * 19)
# 7.1.5
# st = input()
# for i in range(10):
#     print(i, st)
# 7.1.6
# На вход программе подается натуральное число n.
# Напишите программу, которая для каждого из чисел от 0 до n (включительно) выводит фразу:
# «Квадрат числа [число] равен [число]» (без кавычек).
# n = int(input())
# for i in range(0, n + 1):
#     print("Квадрат числа " + str(i) + " равен " + str(i ** 2))
# 7.1.7
# На вход программе подается натуральное число n(n≥2) – катет прямоугольного равнобедренного треугольника.
# Напишите программу, которая выводит звездный треугольник в соответствии с примером.
# n = int(input())
# for i in range(n):
#     i -= 1
#     print("*" * (n - i - 1))
# 7.1.8
# m = int(input())
# p = int(input())
# n = int(input())
# for i in range(n):
#     print(i + 1, float(m * (p / 100 + 1) ** i))
# 7.2.1
# m = int(input())
# n = int(input())
# for i in range(m, n + 1):
#     print(i, sep='\n')
# 7.2.2
# m = int(input())
# n = int(input())
# if m > n:
#     for i in range(m, n - 1, -1):
#         print(i)
# elif m < n:
#     for i in range(m, n + 1):
#         print(i)
# else:
#     print(m)
# 7.2.3
# m = int(input())
# n = int(input())
# if m > n:
#     if m % 2 == 0:
#         for i in range(m, n, -2):
#             print(i-1)
#     elif m % 2 != 0:
#         for i in range(m, n, -2):
#             print(i)
# 7.2.4
# m = int(input())
# n = int(input())
# for i in range(m, n+1):
#     if i % 10 == 9:
#         print(i)
#     elif i % 17 == 0:
#         print(i)
#     elif i % 3 == 0 and i % 5 == 0:
#         print(i)
# 7.2.5
# n = int(input())
# for i in range(1, 11):
#     print(str(n) + " x " + str(i) + " = " + str(n * i))
# 7.3.1
# На вход программе подаются два целых числа a и b (a≤b).
# Напишите программу, которая подсчитывает количество чисел в диапазоне
# от a до b включительно, куб которых оканчивается на 4 или 9.
# a = int(input())
# b = int(input())
# count = 0
# for i in range (a, b+1):
#     if (i ** 3) % 10 == 4 or (i ** 3) % 10 == 9:
#         count = count + 1
# print(count)
# 7.3.2
# На вход программе подается натуральное число n, а затем n целых чисел,
# каждое на отдельной строке. Напишите программу, которая подсчитывает сумму введенных чисел.
# n = int(input())
# count = 0
# for i in range(n):
#     a = int(input())
#     count = count + a
# print(count)
# 7.3.3
# n = int(input())
# f1 = 0
# for i in range(1, n+1):
#     f1 = f1 + 1/i
#     f2 = f1 - log(i)
# print(f2)
# 7.3.4
# n = int(input())
# count = 0
# for i in range(1, n + 1):
#     if i ** 2 % 10 == 2 or i ** 2 % 10 == 5 or i ** 2 % 10 == 8:
#         count = count + i
# print(count)
# 7.3.5
# n = int(input())
# count = 1
# f = factorial(count)
# for i in range(1, n + 1):
#     count = count * i
#     # f = factorial(count)
# print(count)
# 7.3.6
# f = 1
# for i in range(1, 11):
#     n = int(input())
#     if n != 0:
#         f = f * n
# print(f)
# 7.3.7
# На вход программе подается натуральное число n.
# Напишите программу, которая вычисляет сумму всех его делителей.
# n = int(input())
# sum = 0
# for i in range(1, n + 1):
#     if n % i == 0:
#         sum = sum + i
# print(sum)
# 7.3.8
# На вход программе подается натуральное число n. Напишите программу вычисления знакочередующей суммы
# 1−2+3−4+5−6+...+(−1)^n+1*n.
# n = int(input())
# sum = 0
# for i in range(1, n + 1):
#     if i % 2 == 0:
#         sum = sum - i
#     else:
#         sum = sum + i
# print(sum)
# 7.3.9
# На вход программе подаются натуральное число n≥2, а затем n различных натуральных чисел, каждое на отдельной строке.
# Программа должна вывести два наибольших числа, каждое на отдельной строке.
# n = int(input())
# largest1 = 0
# largest2 = 0
# for i in range(1, n+1):
#     num = int(input())
#     if num > largest1:
#         largest2 = largest1
#         largest1 = num
#     elif num > largest2:
#         largest2 = num
# print(largest1, largest2, sep="\n")
# 7.3.10
# n = 10
# count = 0
# for i in range(1, n+1):
#     num = int(input())
#     if num % 2 == 0:
#         count += 1
# if count == 10:
#     print("YES")
# else:
#     print("NO")
# 7.3.11
# Напишите программу, которая считывает натуральное число n и выводит первые n чисел последовательности Фибоначчи.
# Примечание.Последовательность Фибоначчи – это последовательность натуральных чисел,
# где каждое последующее число является суммой двух предыдущих:
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
# n = int(input())
# tmp = 0
# num = 1
# Fn = Fn–2 + Fn–1, где F0 = 0, F1 = 1, а n — больше или равно 2 и является целым числом.
# Первая переменная у тебя должна переприсваиваться второй,
# в это же время вторая переменная у тебя должна получать сложение двух предыдущих значений
# for _ in range(0, 1):
#     tmp, num = num, tmp + num
#     print(tmp, end=" ")
# 7.4.4
# num = int(input())
# while num % 7 != 0:
#     print(num)
#     num = int(input())
# 7.4.5
# num = int(input())
# sum = 0
# while num >= 0:
#     sum = sum + num
#     num = int(input())
# print(sum)
# 7.4.6
# n = int(input())
# count = 0
# while 0 < n < 6:
#     if n == 5:
#         count += 1
#     n = int(input())
# print(count)
# 7.4.7
# n = int(input())
# count = 0
# while n >= 25:
#     count += 1
#     n = n - 25
# while n >= 10:
#     count += 1
#     n = n - 10
# while n >= 5:
#     count += 1
#     n = n - 5
# while n >= 1:
#     count += 1
#     n = n - 1
# print(count)

# Тебе надо заплатить 1000рублей доставщику, у тебя есть купюры 500,100,50, и монеты по рублю.
# Тебе надо заплатить доставшику купюрами как можно большим номиналом,
# потому что после того как доставщик уйдет, ты пойдешь на рынок за продуктами,
# а там потребуется много мелочи. Так вот напиши программу,
# которая на ходу будет получать сумму деняк=1000р, а на выходе говорить,
# что дай две бумажки по 500 или 10 по 100.
# Когда на 1000 будет работать введи 35, 355 и так
# далее на всех числах должно адекватно работать.
# n = 157
# count = 0
# while n // 500:
#     n -= 500
#     count += 1
# while n // 100:
#     n -= 100
#     count += 1
# while n // 50:
#     n -= 50
#     count += 1
# while n // 1:
#     n -= 1
#     count += 1
# print(count)
# 7.5.1
# n = int(input())
# while n != 0:
#     last_dig = n % 10
#     n = n // 10
#     print(last_dig)
# 7.5.2
# n = int(input())
# while n != 0:
#     last = n % 10
#     n = n // 10
#     num = last
#     print(num, end = "")
# 7.5.3
# n = int(input())
# mini = 9
# maxi = 0
# while n >= 1:
#     last = n % 10
#     # n = n // 10
#     if mini > last:
#         mini = last
#     if maxi < last:
#         maxi = last
#     n = n // 10
# print("Максимальная цифра равна", maxi)
# print("Минимальная цифра равна", mini)
# 7.5.4
# Дано натуральное число. Напишите программу, которая вычисляет:
# сумму его цифр;
# количество цифр в нем;
# произведение его цифр;
# среднее арифметическое его цифр;
# его первую цифру;
# сумму его первой и последней цифры.
# n = int(input())
# summ = 0
# quantity = len(str(n))
# prod = 1
# mid = 0
# first = 0
# summ1 = 0
# last = n % 10
# while n != 0:
#     last_cycle = n % 10
#     summ += last_cycle
#     prod *= last_cycle
#     mid = summ / quantity
#     n = n // 10
#     first = last_cycle + n
# summ1 = last + first
# print(summ, quantity, prod, mid, first, summ1, sep="\n")
# 7.5.5
# n = int(input())
# last = 0
# while n > 9:
#     last = n % 10
#     n = n // 10
#     if len(str(last)) == 2:
#         pass
# print(last % 10)
# 7.5.6
# Дано натуральное число. Напишите программу,
# которая определяет, состоит ли указанное число из одинаковых цифр.
# n = int(input())
# mini = 9
# maxi = 0
# while n >= 1:
#     last = n % 10
#     if mini > last:
#         mini = last
#     if maxi < last:
#         maxi = last
#     n = n // 10
# if mini == maxi:
#     print("YES")
# else:
#     print("NO")
# 7.5.7
# Дано натуральное число. Напишите программу, которая определяет,
# является ли последовательность его цифр при просмотре
# справа налево упорядоченной не по убыванию.
# n = int(input())
# flag = True
# temp = 0
# while n > 0:
#     last = n % 10
#     if last >= temp and flag == True:
#         pass
#     else:
#         flag = False
#     temp = last
#     n = n // 10
# if flag == True:
#     print("YES")
# else:
#     print("NO")
# 7.6.1
# На вход программе подается число n>1.
# Напишите программу, которая выводит его наименьший отличный от 1 делитель.
# n = int(input())
# for i in range(2, n+1):
#     if n % i == 0:
#         print(i)
#         break
# 7.6.2
# На вход программе подается натуральное число n. Напишите программу,
# которая выводит числа от 1 до n включительно за исключением:
# чисел от 5 до 9 включительно;
# чисел от 17 до 37 включительно;
# чисел от 78 до 87 включительно.
# n = int(input())
# for i in range(1, n + 1):
#     # if 5 <= i <= 9 and 17 <= i <= 37 and 78 <= i <= 87:
#     if 5 <= i <= 9:
#         continue
#     elif 17 <= i <= 37:
#         continue
#     elif 78 <= i <= 87:
#         continue
#     print(i)
# 7.8.last
# найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й степени другого положительного целого числа.
# Таким образом, найдите пять натуральных чисел
# a,b,c,d,e удовлетворяющих условию:a5 +b5 +c5 +d5 =e5.
# for a in range(1, 151):
#     for b in range(a, 151):
#         for c in range(b, 151):
#             for d in range(c, 151):
#                 e = int((a ** 5 + b ** 5 + c ** 5 + d ** 5)**(1/5))
#                 if a ** 5 + b ** 5 + c ** 5 + d ** 5 == e ** 5:
#                     print('a = ', a, 'b = ', b, 'c = ', c, 'd = ', d, 'e = ', e)
#                     print('e = ', e, 'a + b + c + d + e = ', a+b+c+d+e)
# 7.9.1
# n = 5
# count = 0
# for i in range(count, n+1):
#     for j in range(1, i+1):
#         count += 1
#         print(count, end = " ")
#     print()
# 7.9.2
# n = int(input())
# for i in range(1, n+1):
#     for j in range(i):
#         print(j+1, end="")
#     for k in range(i-1, 0, -1):
#         print(k, end="")
#     print()
# 7.9.3
# На вход программе подается два натуральных числа a и b (a < b).
# Напишите программу, которая находит натуральное число из отрезка [a; b]
# с максимальной суммой делителей.
# a = int(input())
# b = int(input())
# total = 0
# max = 0
# largest = 0
# for i in range(a, b + 1):
#     count = 0  # обнулятор
#     for j in range(1, i + 1):
#         if i % j == 0 and i >= j:
#             count += j  # подсчёт суммы делителей
#     if total <= count:
#         total = count
#         largest = j
#         print()
# print('largest = ', largest, 'total = ', total)
# 7.9.4
# На вход программе подается натуральное число n. Напишите программу,
# выводящую графическое изображение делимости чисел от 1 до n включительно.
# В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.
# n = int(input())
# for i in range(1, n + 1):  # циклом перебираем все числа от 1 до n включительно
#     count = 0  # счётчик делителей # вводим счетчик, который будет обнуляться каждую новую итерацию
#     for j in range(1, i + 1):  # во внутреннем цикле проверяем каждое из чисел на кол-во делителей
#         if i % j == 0 and i >= j:  # если делитель есть, то ->
#             count += 1  # -> к счетчику добавляем 1, это наши будущие плюсики
#     print(j, '+' * count, sep='')  # выводим строку с числом и нужным кол-вом плюсов в рамках одной итерации
#     # print()
#     # print('n =', n, 'j =', j, 'count =', '+'*count)
# 7.9.5
# На вход программе подается натуральное число n. Напишите программу,
# которая находит цифровой корень данного числа. Цифровой корень числа n получается следующим образом:
# если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс,
# то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.
# n = int(input())
# summ = 0
# total = 0
# while n > 9:
#     summ = 0
#     while n > 0:
#         summ += n % 10
#         n = n // 10
#     n = summ
# print('n =', n)
# 7.9.6
# Дано натуральное число n. Напишите программу, которая выводит значение суммы 1! + 2! + 3! + … + n!.
# Факториалом натурального числа n,
# называется произведение всех натуральных чисел от 1 до n, то есть n! =1⋅2⋅3⋅…⋅n
# v_1
# n = int(input())
# fact = 1
# summ = 0
# for i in range(1, n + 1):
#     fact *= i  # факториал числа n
#     summ += fact
# print('fact =', fact, 'summ =', summ)
# v_2
# n = int(input())
# fact = 1
# summ = 0
# for i in range(1, n + 1):
#     fact = 1
#     for j in range(1, i + 1):
#         fact *= j  # факториал числа n
#     summ += fact
# print(summ)
# 7.9.7
# На вход программе подается два натуральных числа a и b (a < b).
# Напишите программу, которая находит все простые числа от a до b включительно.
# !!! Число 1 простым не является. !!!
# a = int(input())
# b = int(input())
# # count = 0
# for i in range(a, b + 1):
#     count = 0
#     for j in range(1, i + 1):
#         if i % j == 0:
#             count += 1
#     if count == 2:
#         print('count =', count, 'i =', i,'j =', j)
# 8.2.4 exm
# row = int(input())
# col = 19
# for i in range(row):
#     for j in range(col):
#         if i == 0 or i == (row - 1) or j == 0 or j == (col-1):
#             print('*', end='')
#         else:
#             print(' ', end='')
#     print()
# 8.2.5 exm
# Дано натуральное число n(n>99). Напишите программу, которая определяет его третью (с начала) цифру.
# n = int(input())
# last = 0
# while n > 99:
#     last = n % 10
#     n = n // 10
#     if len(str(last)) == 2:
#         pass
# print(last % 10)
# 8.2.6 exm
# Дано натуральное число. Напишите программу, которая вычисляет:
# количество цифр 3 в нем;
# сколько раз в нем встречается последняя цифра;
# количество четных цифр;
# сумму его цифр, больших пяти;
# произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
# сколько раз в нем встречается цифры 0 и 5 (всего суммарно).
# n = int(input())
# count5 = 0
# count3 = 0
# counter_last = n % 10
# count_last = 0
# count7 = 1
# count05 = 0
# count2 = 0
# while n != 0:
#     a = count_last
#     if a == 3:
#         count3 += 1
#     if a == counter_last:
#         count_last += 1
#     if a // 2 == 0:
#         count2 += 1
#     if a > 5:
#         count5 += 1
#     if a > 7:
#         count7 *= a
#     if a == 0 or a == 5:
#         count05 += 1
#     n = n // 10
# print(count5, count3, count_last, count7, count05, count2, sep='/n')
# 9.1.3
# s = input()
# for i in range(0, len(s), 2):
#     print(s[i], sep = "\n")
# 9.1.2
# На вход программе подается одна строка. Напишите программу,
# которая выводит в столбик элементы строки в обратном порядке.
# для того, чтобы не путаться со всякими отрицательными обозначениями по типу тех,
# что предлагают ниже
# (например, "Цикл For(От -1 до -количество символов-1, -1)"  - тут нужно ещё думать о -len(text)-1,
# что, как по мне, выглядит эдаким костыльком, поскольку работать с отрицательными числами
# всегда гораздо менее комфортно, чем с положительными), просто подумайте над тем,
# что последний символ имеет индекс -1, предпоследний индекс равен -2 и наконец
# самый первый равен -len(text). Но тут мы видим, что в качестве индексов выступает
# возрастающая последовательность 1, 2,3...len(text), но только взятая со знаком минус.
# Так не проще ли тогда уж, записать цикл в таком виде:
# for i in range(1, len(text)+1):
#     print(text[-i])
# То есть, с помощью цикла генерируем числа 1... len(text) и при печати просто добавляем знак минус
# s = input()
# for i in range(1, len(s)+1):
#     print(s[-i], sep="\n")
# 9.1.3
# На вход программе подаются три строки: имя, фамилия и отчество.
# Напишите программу, которая выводит инициалы человека.
# im = input()
# fam = input()
# ot = input()
# print(fam[0] + im[0] + ot[0], sep="\n")
# 9.1.4
# На вход программе подается одна строка состоящая из цифр.
# Напишите программу, которая считает сумму цифр данной строки.
# s = input()
# summ = 0
# for i in range(0, len(s)):
#     summ += int(s[i])
# print(summ)
# 9.1.5
# На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек),
# если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).
# s = input()
# res = "_"
# for i in range(0, len(s)):
#     if s[i] in '0123456789':
#         res = "Цифра"
#         break
#     else:
#         res = "Цифр нет"
# print(res)
# 9.1.6
# На вход программе подается одна строка. Напишите программу,
# которая определяет сколько раз в строке встречаются символы + и *.
# s = input()
# count_plus = 0
# count_star = 0
# for i in range(0, len(s)):
#     if s[i] == "+":
#         count_plus += 1
#     elif s[i] == "*":
#         count_star += 1
# print("Символ + встречается", count_plus, "раз")
# print("Символ * встречается", count_star, "раз")
# 9.1.7
# На вход программе подается одна строка. Напишите программу,
# которая определяет сколько в ней одинаковых соседних символов.
# s = input()
# count = 0
# for i in range (0, len(s)-1):
#     if s[i] == s[i+1]:
#         count += 1
# print(count)
# 9.1.8
# На вход программе подается одна строка с буквами русского языка.
# Напишите программу, которая определяет количество гласных и согласных букв.
# В русском языке 10 гласных букв (а, у, о, ы, и, э, я, ю, ё, е)
# и 21 согласная буква (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).
# s = input()
# s = "Вдохновение – это умение приводить себя в рабочее состояние!"
# count_glas = 0
# count_sogl = 0
# for i in range (0, len(s)):
#     if s[i] in 'ауоыиэяюёеАУОЫИЭЯЮЁЕ':
#         count_glas += 1
#     if s[i] in 'бвгджзйклмнпрстфхцчшщБВГДЖЗЙКЛМНПРСТФХЦЧШЩ':
#         count_sogl += 1
# print("Количество гласных букв равно", count_glas)
# print("Количество согласных букв равно", count_sogl)
# !!! Лучше будет привести строку в нижний регистр:
# st = input().lower()
# 9.1.9
# На вход программе подается натуральное число, записанное в десятичной системе счисления.
# Напишите программу, которая переводит данное число в двоичную систему счисления.
# num = 128
# # num = int(input())
# stroka = ""
# while num > 0:
#     stroka = str(num % 2) + stroka
#     num //= 2
# print(stroka)
# 9.2.5
# На вход программе подается одно слово, записанное в нижнем регистре.
# Напишите программу, которая определяет является ли оно палиндромом.
# Палиндром читается одинаково в обоих направлениях, например слово «потоп».
# s = "potop"
# # s = input()
# if s[:] == s[::-1]:
#     print("YES")
# else:
#     print("NO")
# 9.2.6
# На вход программе подается одна строка. Напишите программу, которая выводит:
# 1. общее количество символов в строке;
# 2. исходную строку, повторенную 3 раза;
# 3. первый символ строки;
# 4. первые три символа строки;
# 5. последние три символа строки;
# 6. строку в обратном порядке;
# 7. строку с удаленным первым и последним символом.
# s = "abcdefghijklmnopqrstuvwxyz"
# # s = input()
# print(len(s))
# print(s * 3)
# print(s[0])
# print(s[0:3])
# print(s[-3:])
# print(s[::-1])
# print(s[1:-1])
# 9.2.7
# На вход программе подается одна строка. Напишите программу, которая выводит:
# 1 третий символ этой строки;
# 2 предпоследний символ этой строки;
# 3 первые пять символов этой строки;
# 4 всю строку, кроме последних двух символов;
# 5 все символы с четными индексами;
# 6 все символы с нечетными индексами;
# 7 все символы в обратном порядке;
# 8 все символы строки через один в обратном порядке, начиная с последнего.
# s = "abcdefghijklmnopqrstuvwxyz"
# # s = input()
# print(s[2])
# print(s[-2])
# print(s[0:5])
# print(s[:-2])
# print(s[0::2])
# print(s[1::2])
# print(s[::-1])
# print(s[::-2])
# 9.2.8
# На вход программе подается строка текста. Напишите программу,
# которая разрежет ее на две равные части, переставит их местами и выведет на экран.
# s = "qwerty"
# # s = input()
# s1 = s[:len(s) - len(s)//2]
# s2 = s[len(s) - len(s)//2:]
# print(s2 + s1)
# 9.3.1
# На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом.
# Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.
# sur, name = input().split()
# if sur[0] == sur[0].upper() and name[0] == name[0].upper():
#     print("YES")
# else:
#     print("NO")
# 9.3.2
# На вход программе подается строка. Напишите программу,
# которая меняет регистр символов, другими словами замените все строчные символы заглавными и наоборот.
# s = input()
# print(s.swapcase())
# 9.3.3
# На вход программе подается строка текста. Напишите программу,
# которая определяет является ли оттенок текста хорошим или нет.
# Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.
# s = input().lower()
# if "хорош" in (s[:]):
#     print("YES")
# else:
#     print("NO")
# 9.3.4
# На вход программе подается строка. Напишите программу,
# которая подсчитывает количество буквенных символов в нижнем регистре.
# s = input()
# count = 0
# for i in range(0, len(s)):
#     if s[i] in "abcdefghijklmnopqrstuvwxyz":
#         count += 1
# print(count)
# 9.4.1
# На вход программе подается строка текста, состоящая из слов,
# разделенных ровно одним пробелом. Напишите программу,
# которая подсчитывает количество слов в ней.
# s = "Hello world"
# # s = input()
# print(int(s.count(' '))+1)
# 9.4.2
# На вход программе подается строка генетического кода, состоящая из
# букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин).
# Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина
# входит в данную строку генетического кода.
# Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.
# s = "АааГГЦЦцТТттт"
# s = input()
# s = s.lower()
# cntA = s.count('а')
# cntG = s.count('г')
# cntC = s.count('ц')
# cntT = s.count('т')
# print("Аденин:", cntA)
# print("Гуанин:", cntG)
# print("Цитозин:", cntC)
# print("Тимин:", cntT)
# 9.4.3
# Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди.
# На приемник ему поступает n различных последовательностей кода Морзе.
# Декодировав их, он получает последовательности из цифр и строчного латинского алфавита,
# при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза.
# Помогите определить Джиму количество сообщений от Оди.
# Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.
# Примечание: Числа 11 необязательно должны быть разделены другими символами,
# нужно подсчитать вхождение последовательности символов "11",
# т.е. например в строке "111" содержится одна такая последовательность, в то время как в "1111" их уже две.
# n = int(input())
# count = 0
# for i in range (n):
#     s = input()
#     if s.count('11') >= 3:
#         count +=1
# print(count)
# 9.4.4
# На вход программе подается строка текста. Напишите программу,
# которая подсчитывает количество цифр в данной строке.
# s = 'l33t 3301'
# # s = input()
# count = 0
# for i in range(len(s)):
#     if s[i] in '1234567890':
#         count += 1
# print(count)
# 9.4.5
# На вход программе подается строка текста. Напишите программу, которая проверяет,
# что строка заканчивается подстрокой .com или .ru.
# s = 'www.qweq.ru'
# if s.endswith('.ru') or s.endswith('.com'):
#     print("YES")
# else:
#     print("NO")
# 9.4.6
# На вход программе подается строка текста. Напишите программу,
# которая выводит на экран символ, который появляется наиболее часто.
# s = "aaaabbc"
# # s = input()
# min = 0  # Переменная для перезаписи частого символа, если таких несколько. Будет учитываться последний
# max = 0  # Переменная для подсчета самого частого символа
# for i in s:
#     if s.count(i) >= min:  # Через цикл считываем количество каждого символа в строке
#         min = s.count(i)  # Находим самый частый символ
#         max = i  # Записываем его в переменную и перезаписываем если таких символов несколько
# print(max)
# 9.4.7
# На вход программе подается строка текста.
# Если в этой строке буква «f» встречается только один раз, выведите её индекс.
# Если она встречается два и более раз,
# выведите индекс её первого и последнего вхождения на одной строке,
# разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».
# s = 'abcdefg'
# # s = input()
# if s.count('f') == 1:
#     print(s.find('f'))
# elif s.count('f') > 1:
#     print(s.find('f'), s.rfind('f'))
# else:
#     print("NO")
# 9.4.8
# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза.
# Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h»,
# а также все символы, находящиеся между ними.
# s = 'ahahahahaha'
# # s = input()
# if s.count('h') >=2:
#     s1 = s.find('h')
#     s2 = s.rfind('h')
#     s3 = s[s1:s2+1]
# print(s.replace(s3,''))
# 9.5.1+2
# Дополните приведенный код, используя форматирование строк с помощью метода format, так чтобы он вывел текст:
# «In 2010, someone paid 10k Bitcoin for two pizzas.» (без кавычек).
# year = 2010
# price = 10
# k = 'k Bitcoin'
# s = 'In {0}, someone paid {1}{2} for two pizzas.'
# print(s.format(year, price, k))
# year = 2010
# amount = '10K'
# currency = 'Bitcoin'
# print(f'In {year}, someone paid {amount} {currency} for two pizzas.')
# 9.6.1
# На вход программе подаются два числа a и b. Напишите программу,
# которая для каждого кодового значения в диапазоне от a до b (включительно),
# выводит соответствующий ему символ из таблицы символов Unicode.
# a = int(input())
# b = int(input())
# for i in range(a, b + 1):
#     print(chr(i), end=' ')
# 9.6.2
# На вход программе подается строка текста. Напишите программу,
# которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.
# s = 'Hello world!'
# # s = input()
# for i in range (0, len(s)):
#     print(ord(s[i]), end = ' ')
# 9.6.3*
# Легион Цезаря, созданный в 23 веке на основе Римской Империи не изменяет древним традициям и использует шифр Цезаря.
# Это их и подвело, ведь данный шифр очень простой.Однако в постапокалипсисе люди плохо знают все тонкости
# довоенного мира, поэтому ученые из НКР не могут понять, как именно нужно декодировать данные сообщения.
# Напишите программу для декодирования этого шифра.
# Формат входных данных. В первой строке дается число (1≤ n≤ 25) – сдвиг,
# во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.
# Формат выходных данных. Программа должна вывести одну строку – декодированное сообщение.
# Обратите внимание, что нужно декодировать сообщение, а не закодировать.
# n = 14
# s = 'fsfftsfufksttskskt'
# n = int(input())
# s = input().lower()
# for i in range(0, len(s)):
#     ch = ord(s[i]) - n
#     if ch < 97:
#         ch += 26
#     print(chr(ch), end = "")
# Для упрощения понимания задачи схематично сомкнул начало и конец алфавита,
# т. е. после "z" снова следует "a" и т.д., получится замкнутое кольцо.
# Теперь прекрасно понятно, что если при вычете сдвига из кода ASCII
# закодированной буквы получается код  < 97(код первой строчной буквы латиницы -"а"),
# то его необходимо увеличить на 26, чтобы снова попасть в рамки интервала алфавита.
# Не путаем число сдвига и так сказать поправочный коэффициент(26) для условия когда код < 97.
# Тем самым у меня появилась еще одна переменная внутри цикла перед условием < 97 и после него с корректировкой на 26.
