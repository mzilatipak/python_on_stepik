# -*- coding: utf-8 -*-
import random
from math import log2, ceil

# Генератор паролей (https://stepik.org/lesson/338530/step/10?discussion=4328652&unit=322038)
""" digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
lowercase_letters = ['a', 'b', 'c', ',d' 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't,' 'u', 'v', 'w', 'x', 'y', 'z']
uppercase_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T,' 'U', 'V', 'W', 'X', 'Y', 'Z']
unctuation = ['!', '#', '$', '%', '&', '*', '+', '-', '=', '?', '@', '^', '_']
chars = ''
sht = input('Сколько паролей нужно сгенерировать? ')
lenght = input('Какая длинна должна быть у пароля(-ей)? ')
is_digit1 = input('Включать-ли символы "01234567890"?(да, нет) ')
is_upper_simbols = input('Включать ли прописные буквы "ABCDEFGHIJKLMNOPQRSTUVWXYZ"?(да, нет) ')
is_lower_simbols = input('Включать ли строчные буквы "abcdefghijklmnopqrstuvwxyz"?(да, нет) ')
is_unctuation = input('Вкючать ли специальные символы "!#$%&*+-=?@^_"?(да, нет) ')
is_odnoznachnie = input('Включать ли однозначный символы "il1Lo0O"?(да,нет) ')
if is_digit1 == 'да':
    chars += ''.join(digits)
if is_upper_simbols.lower() == 'да':
    chars += ''.join(uppercase_letters)
if is_lower_simbols.lower() == 'да':
    chars += ''.join(lowercase_letters)
if is_odnoznachnie.lower() == 'да':
    chars = chars
if is_odnoznachnie.lower() == 'нет':
   chars.replace("il1Lo0O", '')
def generate_password(lenght, chars):
    return random.sample(chars, int(lenght))
for i in range(int(sht)):
    print(''.join(generate_password(lenght,chars))) """

# Угадайка чисел
""" # Описание проекта: программа генерирует случайное число в диапазоне от 1 до 100 
# и просит пользователя угадать это число. Если догадка пользователя больше случайного числа, 
# то программа должна вывести сообщение 'Слишком много, попробуйте еще раз'. 
# Если догадка меньше случайного числа, то программа должна вывести сообщение 
# 'Слишком мало, попробуйте еще раз'. Если пользователь угадывает число, 
# то программа должна поздравить его и вывести сообщение 'Вы угадали, поздравляем!'.

print("Игра - 'Угадайка число!'")

# user_num = int(input('Введите число от 1 до 100: '))
# rand_num = random.randint(1, 100)  # один раз генерируется рандомное число

while True:
    user_num = int(input('Введите число от 1 до 100: '))
    rand_num = random.randint(1, 100)  # рандомное число генерируется каждый раз
    if user_num > rand_num:
        print('Слишком много, попробуйте еще раз. Загаданное число было:', rand_num)
        user_num = int(input('Введите число от 1 до 100: '))
        continue
    elif user_num < rand_num:
        print('Слишком мало, попробуйте еще раз. Загаданное число было:', rand_num)
        user_num = int(input('Введите число от 1 до 100: '))
        continue
    else: 
        print('Вы угадали, поздравляем!')
        break """

# Какое наименьшее число догадок нужно сделать пользователю, чтобы гарантированно угадать загаданное число от 1 до 100? (7)
# Это бинарный поиск. Его смысл заключается в том, что берём всегда половину и это работает на любом промежутке.
# Допустим, нам надо угадать число и это число 76, но мы этого не знаем и у нас будут подсказки(больше или меньше) и мы знаем, что оно находится на промежутке от 1 до 100.
# 1) 100 - 100 // 2 = 50 Берём 100 и делим на два, получится 50.
# 2) 50 + 50 // 2 = 75 Далее берём половину от 50, т.е. 25 и если число больше 50, то прибавляем 25, если меньше то отнимаем. Загаднанное число больше значит прибавляем, если не угадали, дальше то же самое.
# 3) 75 + 25 // 2 = 87 Берём половину от 25, т.е. 12 (Если не делится на цело, то я всегда округляю в меньшую сторону) и прибавляем, т.к. мы знаем, что нужное число больше 75, мы будем снова прибавлять.
# 4) 87 - 12 // 2 = 81 Далее снова делим 12 на 2 и т.к. 87 уже больше чем надо, то отнимаем.
# 5) 81 - 6 // 2 = 78 Следуем схеме, 6 делим на 2 и отнимаем от 81
# 6) 78 - 3 // 2 = 77 3 делим на 2 и отнимаем от 78, т.к. оно всё ещё больше.
# 7) 77 - 1 = 76 Мы получили минимальное целое, что можно отнять или прибавить и остаётся последний шаг, в зависимости от того, больше нужное число или меньше, мы соответственно, либо прибавляем, либо вычитаем. В нашем случае вычитаем 1 и 100% угадываем число.
# Вот так за семь попыток можно угадать число. Естественно, это работает, только если после каждой попытки у нас будет информация о том, меньшее ли мы число назвали или большее, чем нужно.

# 15.2
""" # Тимур загадал число от 1 до n. За какое наименьшее количество вопросов (на которые Тимур отвечает "больше" или "меньше") 
# Руслан может гарантированно угадать число Тимура?

n = int(input('please enter the number: '))
count = ceil(log2(n))
print(count) """

# Функция проверки корректности введенных данных
""" # Пользователь потенциально может ввести неверные данные, например, не число, или число превышающее 100. 
# Важно предусмотреть такую возможность, чтобы программа продолжала правильно работать. 
# Обработка такого рода ситуаций называется защитой от дурака. 
# Напишите функцию is_valid() в которую передается один строковый аргумент. 
# Функция возвращает значение True если переданный аргумент является целым числом от 1 до 100 и False в противном случае.

def is_valid(num):
    if num.isdigit() and int(num) in range(1, 101):
        return True
    else: return False

n = input()

print(is_valid(n)) """






